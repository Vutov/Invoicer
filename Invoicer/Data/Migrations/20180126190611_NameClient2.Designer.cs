// <auto-generated />
using Invoicer.Data;
using Invoicer.Models.DocModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Invoicer.Data.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    [Migration("20180126190611_NameClient2")]
    partial class NameClient2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Invoicer.Models.DbModels.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Data");

                    b.Property<int?>("DistributorID");

                    b.HasKey("ID");

                    b.HasIndex("DistributorID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ConsultationNumber");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Name");

                    b.Property<DateTime>("RequestDate");

                    b.Property<string>("ResponsiblePerson");

                    b.Property<string>("Vat");

                    b.HasKey("ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Distributor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConsultationNumber");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Vat");

                    b.HasKey("ID");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("CurrencyID");

                    b.Property<int?>("DistributorID");

                    b.Property<DateTime>("DocumentDate");

                    b.Property<string>("DocumentID");

                    b.Property<string>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistributorID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Name", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Data");

                    b.Property<int?>("DistributorID");

                    b.HasKey("ID");

                    b.HasIndex("DistributorID");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.PaymentDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankCode");

                    b.Property<string>("BankName");

                    b.Property<int?>("ClientID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("IBAN");

                    b.Property<string>("PaymentType");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Discount");

                    b.Property<int?>("InvoiceID");

                    b.Property<string>("Measure");

                    b.Property<string>("Note");

                    b.Property<double>("Price");

                    b.Property<double>("PriceWithDiscout");

                    b.Property<int>("ProductID");

                    b.Property<double>("Quantity");

                    b.Property<double>("TotalAmount");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.ResponsiblePerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Data");

                    b.Property<int?>("DistributorID");

                    b.HasKey("ID");

                    b.HasIndex("DistributorID");

                    b.ToTable("ResponsiblePerson");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Address", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Distributor")
                        .WithMany("Address")
                        .HasForeignKey("DistributorID");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Invoice", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientID");

                    b.HasOne("Invoicer.Models.DbModels.User", "CreatedBy")
                        .WithMany("Invoices")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Invoicer.Models.DbModels.Distributor", "Distributor")
                        .WithMany("Invoices")
                        .HasForeignKey("DistributorID");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Name", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Distributor")
                        .WithMany("Name")
                        .HasForeignKey("DistributorID");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.PaymentDetail", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Distributor", "Client")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("ClientID");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.Product", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Invoice", "Invoice")
                        .WithMany("Products")
                        .HasForeignKey("InvoiceID");
                });

            modelBuilder.Entity("Invoicer.Models.DbModels.ResponsiblePerson", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.Distributor")
                        .WithMany("Responsibles")
                        .HasForeignKey("DistributorID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Invoicer.Models.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Invoicer.Models.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
